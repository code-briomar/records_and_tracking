//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "files")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub file_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub file_name: String,
    pub uploaded_by: i32,
    pub date_uploaded: Option<DateTimeUtc>,
    #[sea_orm(column_type = "Text")]
    pub file_size: String,
    pub case_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub version: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cases::Entity",
        from = "Column::CaseId",
        to = "super::cases::Column::CaseId",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Cases,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UploadedBy",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::cases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cases.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
